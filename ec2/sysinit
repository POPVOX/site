#!/bin/sh

# scp tauberer@tauberer.dyndns.org:dev/popvox/main/ec2/sysinit .

# master server:  sudo DISK=localhost DB=localhost CRON=yes bash sysinit
# testing server:   sudo DISK=localhost DB=localhost CRON=no bash sysinit

# us-east-1a / attach EBS volume on /dev/sdf

# set mysql root password to: qsg;5TtC

# disabling nfs until we really need it
NFS_GRANT="127.0.0.1/255.255.255.0"

# Packages
add-apt-repository ppa:nginx/stable
apt-get update
apt-get upgrade -y

tasksel install lamp-server
tasksel install unzip

apt-get install -y \
 nfs-common nfs-kernel-server \
 sendmail-bin rdiff-backup \
 git-core subversion mercurial \
 libapache2-mod-wsgi python-flup nginx-full \
 python-beautifulsoup python-html5lib python-feedparser python-recaptcha python-httplib2 python-mysqldb python-imaging python-markdown python-lxml \
 memcached python-memcache \
 python-mechanize python-matplotlib \
 texlive-latex-base texlive-latex-recommended fontconfig ttf-linux-libertine

## Custom packages
#DJANGO=python-django_1.2.5-1ubuntu1_all.deb
#wget http://launchpadlibrarian.net/64542273/$DJANGO
#dpkg -i $DJANGO
#rm $DJANGO
apt-get install python-django
   # in /usr/share/pyshared/django/middleware/csrf.py I've manually disabled strict referrer checking

# Persistent storage area.
mkdir -p /mnt/persistent
if [[ "$DISK" == "localhost" ]]; then
	# Mount the EBS disk.
	echo "/dev/sdf        /mnt/persistent auto noatime" >> /etc/fstab;
	mount -a;
	
	# Grant anyone read-only access to the disk via NFS (who can make it past the security group).
	echo "/mnt/persistent $NFS_GRANT(ro,no_root_squash,no_subtree_check)" >> /etc/exports;
	exportfs  -a;
	/etc/init.d/portmap start;
	/etc/init.d/nfs start;
		
else
	echo "$DISK:/mnt/persistent      /mnt/persistent  nfs" >> /etc/fstab;
	service start portmap;
	mount -a;
fi

# Source code
	
if [[ "$DISK" == "localhost" ]]; then
	# Startup scripts. Copy into /etc/rc.local. (Because rc.local has an exit at the end, we can't simply
	# append to the file. Solution?). Run git as the ubuntu user (which makes permissions of the
	# persistent disk).
	su ubuntu -c "git daemon --base-path=/mnt/persistent/ --export-all --detach --enable=receive-pack /mnt/persistent/";
fi

# Users

GIT_DIR=/mnt/persistent/sources.git git show master:ec2/inituser > inituser

useradd -m --shell /bin/bash www
su www -c "cd; sh /home/ubuntu/inituser"

#useradd -m --shell /bin/bash josh;
#su josh -c "cd; sh /home/ubuntu/inituser 444";

#useradd -m --shell /bin/bash william;
#su william -c "cd; sh /home/ubuntu/inituser 555";

# Cron jobs run as the ubuntu user.
if [[ "$CRON" == "yes" ]]; then
	crontab -u ubuntu /home/www/sources/scripts/crontab;
fi

# Mysql
if [[ "$DB" == "localhost" ]]; then
	# "bind" the persistent mysql directory to /var/lib/mysql and trash the system-provided contents
	service mysql stop;
	rm -rf /var/lib/mysql/;
	mkdir /var/lib/mysql;
	#mount --bind /mnt/persistent/mysql/ /var/lib/mysql;
	echo "/mnt/persistent/mysql/  /var/lib/mysql  none bind" >> /etc/fstab;
	mount -a;
	
	# make mysql listen on all interfaces to support additional servers
	echo "[mysqld]" > /etc/mysql/conf.d/local.cnf;
	echo "bind-address            = 0.0.0.0" >> /etc/mysql/conf.d/local.cnf;
	
	service mysql start;
	
	# grant anyone access (obviously we don't 
	mysql -p'qsg;5TtC' -e "INSERT INTO user (Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv)    VALUES('%','slave',PASSWORD('qsg;5TtC'),'Y','Y','Y', 'Y'); FLUSH PRIVILEGES;";
fi

# Apache, which handles WSGI deployment of Django. The alternative is
# to run Django via FastCGI, which requires more config.
ln -s /home/www/sources/httpd.conf /etc/apache2/conf.d/www.conf
a2dissite default
a2enmod proxy proxy_http # we use proxy to pass the blog through to occams
sed -i "s/Deny from all/#Deny from all/" /etc/apache2/mods-enabled/proxy.conf
/etc/init.d/apache2 restart

# Nginx which handles static content and caching as a reverse-proxy
# to Apache. It also handles SSL processing, so behind Nginx is all
# plain HTTP.
rm /etc/nginx/sites-enabled/default
sudo ln -s /home/www/sources/nginx.conf /etc/nginx/local.conf

