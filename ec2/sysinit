#!/bin/sh

# Start a new machine instance...
# last tested AMI: ubuntu-images/ubuntu-natty-11.04-amd64-server-20110426 (ami-68ad5201)
#      ami-1aad5273 also works on a micro instance
# if disk is local: us-east-1a / attach EBS volume on /dev/sdf (which to Ubuntu is /dev/xvdf)

# get this script onto the machine either using:
#    bash preinit
# or
#    scp tauberer@tauberer.dyndns.org:dev/popvox/main/ec2/sysinit .

#
# master server:  sudo DISK=localhost DB=localhost CODE=localhost CRON=yes bash sysinit
#
# slave server:   export MASTER=...
#                 sudo DISK=$MASTER   DB=$MASTER   CODE=$MASTER   CRON=no  bash sysinit
#
# testing server: sudo DISK=localhost DB=localhost CODE=XXXXX     CRON=no  bash sysinit
#
# if DB is localhost, then DISK has to be localhost too!
# the master server should be assocated with the elastic IP address tied to popvox.com
#
# Although it seems like we allow MySQL, NFS, and Git from any Amazon EC2 instance,
# we obviously have a strict firewall in place to allow only connections from within
# the security group for non-public services. Only SSH, HTTP, and HTTPS should be exposed 
# outside of the security group.

MYSQL_PASSWORD="qsg;5TtC"
NFS_GRANT="10.0.0.0/0.0.0.0"

# Packages
add-apt-repository ppa:nginx/stable
apt-get update
apt-get upgrade -y

apt-get install -y \
 unzip elinks \
 nfs-common nfs-kernel-server \
 sendmail-bin rdiff-backup \
 git-core subversion mercurial \
 nginx-full mysql-server python-flup \
 python-beautifulsoup python-html5lib python-feedparser python-recaptcha python-httplib2 python-mysqldb python-imaging python-markdown python-lxml sphinxsearch \
 memcached python-memcache \
 poppler-utils libqtcore4 pdftk graphicsmagick \
 python-mechanize python-matplotlib python-scipy python-rsvg \
 texlive-latex-base texlive-latex-recommended texlive-xetex fontconfig ttf-linux-libertine

## Custom packages
#DJANGO=python-django_1.2.5-1ubuntu1_all.deb
#wget http://launchpadlibrarian.net/64542273/$DJANGO
#dpkg -i $DJANGO
#rm $DJANGO
apt-get install python-django
   # in /usr/share/pyshared/django/middleware/csrf.py I've manually disabled strict referrer checking

# Persistent storage area.
mkdir -p /mnt/persistent
if [[ "$DISK" == "localhost" ]]; then
	# Mount the EBS disk.
	echo "/dev/xvdf        /mnt/persistent auto noatime" >> /etc/fstab;
	mount -a;
	chown -R mysql.mysql /mnt/persistent/mysql
	
	# Grant anyone read-only access to the disk via NFS (who can make it past the security group).
	echo "/mnt/persistent $NFS_GRANT(ro,no_root_squash,no_subtree_check)" >> /etc/exports;
	exportfs  -a;
	/etc/init.d/portmap start;
	/etc/init.d/nfs start;
		
else
	echo "$DISK:/mnt/persistent      /mnt/persistent  nfs" >> /etc/fstab;
	service start portmap;
	mount -a;
fi

# Start the git daemon when this machine is hosting the source code.
# Copy into /etc/rc.local. (Because rc.local has an exit at the end, we can't simply append
# to the file. Solution?). Run git as the ubuntu user which matches permissions of /mnt/persistent.
if [[ "$CODE" == "localhost" ]]; then
	su ubuntu -c "git daemon --base-path=/mnt/persistent/ --export-all --detach --enable=receive-pack /mnt/persistent/";
fi

# Mysql
if [[ "$DB" == "localhost" ]]; then
	# "bind" the persistent mysql directory to /var/lib/mysql and trash the system-provided contents
	service mysql stop;
	rm -rf /var/lib/mysql/;
	mkdir /var/lib/mysql;
	#mount --bind /mnt/persistent/mysql/ /var/lib/mysql;
	echo "/mnt/persistent/mysql/  /var/lib/mysql  none bind" >> /etc/fstab;
	mount -a;
	
	# make mysql listen on all interfaces to support additional servers
	echo "[mysqld]" > /etc/mysql/conf.d/local.cnf;
	echo "bind-address            = 0.0.0.0" >> /etc/mysql/conf.d/local.cnf;
	
	service mysql start;
	
	# set a root password
	mysqladmin -u root password "$MYSQL_PASSWORD";
	
	# grant anyone access with username 'slave' and the same password 
	mysql mysql -p'qsg;5TtC' -e "INSERT INTO user (Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv)    VALUES('%','slave',PASSWORD('qsg;5TtC'),'Y','Y','Y', 'Y'); FLUSH PRIVILEGES;";
fi

# Deployments

# get the inituser script
if [[ "$CODE" == "localhost" ]]; then
	GIT_DIR=/mnt/persistent/sources.git git show master:ec2/inituser > inituser
else
	git clone --bare git://$CODE/sources.git sources.git
	GIT_DIR=sources.git git show master:ec2/inituser > inituser
	GIT_DIR=sources.git git show master:ec2/createuser > createuser
fi

DB=$DB CODE=$CODE bash createuser www

# Cron jobs run as the ubuntu user.
if [[ "$CRON" == "yes" ]]; then
	crontab -u ubuntu /home/www/sources/scripts/crontab;
fi

# Main web config files and services.

rm -f /etc/rc.local
ln -s /home/www/sources/conf/rc.local /etc/rc.local

ln -s /mnt/persistent/config/boto.cfg /etc/

rm /etc/nginx/sites-enabled/default
ln -s /home/www/sources/conf/nginx.conf /etc/nginx/conf.d/local.conf

ln -s /home/www/sources/conf/logrotate.conf /etc/logrotate.d/local

service nginx restart

# Additional services.
if [[ "$DB" == "localhost" ]]; then
	rm -f /etc/sphinxsearch/sphinx.conf;
	ln -s /home/www/sources/conf/sphinx.conf /etc/sphinxsearch/;
	searchd
fi


# Execute other startup services that wouldn't normally start on boot.
# This file is a symlink to a local configuration file.
/etc/rc.local
